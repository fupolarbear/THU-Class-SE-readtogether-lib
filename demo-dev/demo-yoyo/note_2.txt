                                                                     
                                                                     
                                                                     
                                             
2013-10-30 讨论记录



概述

由于缺乏总体了解，我们要先动起来，有点体会了以后才能写出特别细节的设计文档。
因此先简单根据网页的页面做如下规划，作为最初的指导。以下基本单位为页面，
每个页面包括其承载的功能和部分页面设计。不包括用户不可见的页面，
暂不考虑与系统整体关系不大的枝节功能（如用户行为记录）。

根据这一版本的规划，男主、系草了解一下设计文档的结构与写法，
作好准备并先写与细节无关的部分。右右、萌用图片或静态HTML设计有关界面，
至少有主页的HTML版。神霸了解Django与MySQL联用，主要是Object-Relation-Mapping，
若是太烦也可以考虑纯Python直接操作MySQL的关系数据表。
昨天的讨论好像没有把要存什么讨论得很细，不过我会在下面先给一个toy model。
我先把Apache+Django的环境做好，完成网站运行最基本的框架，
使得大家可以联动起来，以便进行接下来的开发。

这一部分Deadline为本周日晚，然后讨论下一步的任务。尤其要把数据明确化。



页面汇总

首页
公告列表页、公告内容页
榜单页
搜索结果页、图书信息页
用户注册页、用户个人中心、用户信息修改
图书管理员个人中心、借出页、归还页、上架信息录入页、图书信息修改页、批量下架页
用户管理员个人中心
root中心



首页

LOGO、搜索框、最新公告、榜单、登录入口

搜索框暂时不考虑各种选项，如书名、作者名、图书编码，只有一个框。

榜单可以只显示主榜单，也可以多榜单切换。具体有哪些榜单待确定。

登陆入口不区分用户/管理，在登录时根据用户名区分跳转。



公告列表页、公告内容页

哪个管理员负责发布公告？！

列表页显示公告题目列表，时间排序，可翻页。

公告分为长期的（如用户守则）和临时的（如开闭馆公告）。

内容页显示一条公告的具体内容。



榜单页

罗列各榜单的情况。



搜索结果页

搜索结果对应的图书列表，应该提供除题目外的简单信息如作者、出版社、版次。
Filter和各种排序先不考虑，默认“神奇排序”。



图书信息页

以ISBN为标准确定是否有独立的图书信息页，页面显示与图书信息相关的详细信息，
以及这本书每一个copy的情况。

用户评论使用AJAX动态加载，无独立页面。



用户注册页、用户信息修改页

按照需求文档设计一个表单即可。



用户个人中心

显示简要个人信息、最近借阅记录、评论记录。

借阅记录保证未还全部显示，可以取消预约、赔偿，更老的AJAX动态加载。

评论记录太多也AJAX还是独立页面？



图书管理员借出页、归还页、上架页、图书信息修改页、下架页

都是表单，上架、下架支持批量。注意操作单位是一个copy而不是一个ISBN对应的书。

图书信息维护包含可删除对本书的评论。

注：copy删除不影响ISBN对应的图书信息页，赔偿行为由用户操作。



图书管理员个人中心

昨天忘了讨论这里有什么，难道图书管理员一登录直接跳到借出页之类的具体功能页面？

也许可以有上下架记录、图书信息修改的log什么的……



用户管理员个人中心

登入后显示各种待“处理”用户的列表，如等待提权、等待注册审批、黑名单（手动洗白）

用AJAX实现一个搜索/filter框，便于找到想操作的用户，
以实现手动拖黑、删除用户等主动管理。

昨天最后提到的“用户良好借阅行为记录”先不管了吧……



root中心

增删管理员、清理数据库等。

我们可以先不实现细节，留一个空页面。



log（暂时搁置不实现）

借阅行为（含赔偿）
用户（黑名单进出、权限变更、注册登入登出）
图书上下架、信息维护
root的操作



数据模型（To 神霸）

以上很多功能要存储的数据还都不够细，所以可以先考虑如下内容：

用户信息：用户名、密码、邮箱，（参见需求文档和文档君）
管理员信息：不独立只是对用户加一个域表示？0是root，1图书2用户，10普通用户
图书信息：参见需求文档和文档君
图书copy信息：独立还是合并入图书信息呢？
评论
借阅行为：参见需求文档
提降权申请、待审批注册的用户（总之就是用户管理员要面对的待“处理”用户列表）
榜单的缓存：（虽然榜单可以根据借阅行为计算，但是定时计算然后缓存会好一点）
公告

log的实现先不管
